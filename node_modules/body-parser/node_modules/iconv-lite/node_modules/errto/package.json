{
  "name": "errto",
  "description": "Simple error handling helper.",
  "version": "0.2.1",
  "keywords": [
    "error",
    "handling"
  ],
  "author": {
    "name": "Alexander Shtuchkin",
    "email": "ashtuchkin@gmail.com"
  },
  "license": "MIT",
  "homepage": "https://github.com/ashtuchkin/errTo",
  "repository": {
    "type": "git",
    "url": "git://github.com/ashtuchkin/errTo.git"
  },
  "scripts": {
    "test": "vows --spec"
  },
  "devDependencies": {
    "vows": "latest"
  },
  "readme": "## errTo - simple error handling helper for Node.js/CoffeeScript/IcedCoffeeScript\n\n[![Build Status](https://secure.travis-ci.org/ashtuchkin/errTo.png?branch=master)](http://travis-ci.org/ashtuchkin/errTo)\n\nOften in Node.js you need to check for 'err' parameter returned from async function. \nThis small module helps dealing with this by calling error handler automatically.\n\n## Sample Usage (CoffeeScript)\n\n```coffeescript\n# What you needed to write without errTo. Remember to check error after each and every async call.\nreadDirectoryAsync = (catalog, callback) ->\n    fs.readdir catalog, (err, filenames) ->\n        if err? then return callback(err) # <= This is evil.\n        console.log \"Success!\"\n        callback null, filenames\n\n# The unicorns come to the rescue.\nerrTo = require 'errto'\n\n# Same function as above, with the errTo helper.\nreadDirectoryAsync = (catalog, callback) ->\n    fs.readdir catalog, errTo callback, (filenames) -> # Notice no 'err' argument.\n        # Error check is done automatically in errTo and callback(err) is called on error.\n        # Subsequent code is called ONLY when no error given.\n        console.log \"Success!\"\n        callback null, filenames\n\n# Express sample.\napp.get '/', (req, res, next) ->\n    readDirectoryAsync __dirname, errTo next, (filenames) -> # Use Express error handling by calling next(err)\n        res.send filenames\n```\n\n## Sample Usage (JavaScript)\n\n```javascript\n// What you needed to write without errTo. Remember to check error after each and every async call.\nfunction readDirectoryAsync(catalog, callback) {\n    fs.readdir(catalog, function(err, filenames) {\n        if (err) {          // <= This whole block is evil.\n            callback(err); \n            return;\n        }\n        \n        callback(null, filenames);\n    });\n}\n\n// The unicorns come to the rescue.\nvar errTo = require('errto');\n\n// Same function as above, with the errTo helper.\nfunction readDirectoryAsync(catalog, callback) {\n    fs.readdir(catalog, errTo(callback, function(filenames) { // Notice no 'err' argument.\n        // Error check is done automatically in errTo and callback(err) is called on error.\n        // Subsequent code is called ONLY when no error given.\n        console.log(\"Success!\");\n        callback(null, filenames);\n    }));\n}\n\n// Express sample.\napp.get('/', function(req, res, next) {\n    readDirectoryAsync(__dirname, errTo(next, function(filenames) { // Use Express error handling by calling next(err)\n        res.send(filenames);\n    }));\n});\n```\n\n## Sample Usage (IcedCoffeeScript)\n\n```coffeescript\n# Almost the same as in CoffeeScript\nerrTo = require 'errto'\n\napp.get '/', (req, res, next) ->\n    await db.getUserById req.userId, errTo next, defer user  # Notice, errTo is outside defer.\n    res.render 'index', {user}\n\napp.get '/posts/:postId', (req, res, next) ->\n    noErr = errTo.bind(null, next) # errTo can be bound in the beginning, using standard JS construct.\n    await db.getPostById req.param('postId'), noErr defer post\n    \n    await\n        # Notice these 2 requests will be run in parallel and if at least one of them fails (returns error)\n        # then the whole block fails. But if both fail, then only the first error is kept.\n        db.getPostComments post._id, errTo next, defer comments\n        db.getPostText post._id, errTo next, defer text\n\n    render 'post', {comments, text}\n```\n\n## How it works\n\n(See index.js, its only 19 LOC)\n\nerrTo function takes 2 arguments: errorHandler and successHandler. It returns a function which, when called,\nwill check if its first argument (err) is truthy and call first or second function correspondingly. \nerrorHandler is called with 'err' argument. successHandler is called with all but the 'err' argument.\n\nNote, either errorHandler or successHandler will be called, and only once. All subsequent calls will be ignored.\nAlso, a errorHandler will not be called more than once, even if wrapped by different calls to errTo. This is needed\nto provide protection when multiple commands are executing at the same time.\n\n**License: MIT**\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/ashtuchkin/errTo/issues"
  },
  "_id": "errto@0.2.1",
  "dist": {
    "shasum": "d6e23b37261f84ed869695f77b4fb7e06c647848",
    "tarball": "http://registry.npmjs.org/errto/-/errto-0.2.1.tgz"
  },
  "_from": "errto@*",
  "_npmVersion": "1.2.32",
  "_npmUser": {
    "name": "ashtuchkin",
    "email": "ashtuchkin@gmail.com"
  },
  "maintainers": [
    {
      "name": "ashtuchkin",
      "email": "ashtuchkin@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "d6e23b37261f84ed869695f77b4fb7e06c647848",
  "_resolved": "https://registry.npmjs.org/errto/-/errto-0.2.1.tgz"
}
